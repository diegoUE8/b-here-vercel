{"version":3,"sources":["../../../src/js/image/image.service.worker.js"],"names":["f","define","amd","ImageServiceWorkerEvent","controllers","resize","src","blob","size","self","createImageBitmap","OffscreenCanvas","sendMessage","then","img","width","height","canvas","ctx","getContext","drawImage","convertToBlob","resizedBlob","type","data","postMessage","addEventListener","event","id","controller","abort","options","mode","fetch","AbortController","signal","_ref","defaultSize","emitDelay","onProgress","onComplete","onError","response","Response","ReadableStream","body","headers","status","contentLength","get","progress","Progress","reader","getReader","stream","start","push","read","_ref2","done","value","close","next","enqueue","catch","err","fetchProgress","error","console","log","request","XMLHttpRequest","open","responseType","withCredentials","onload","this","onprogress","onerror","send","constructor","length","eventStart","loaded","parseInt","chunk","chunkLength","Date","now","total"],"mappings":"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","file":"dist\\js\\workers\\image.service.worker.min.js","sourcesContent":["\r\nconst ImageServiceWorkerEvent = {\r\n\tProgress: 'progress',\r\n\tComplete: 'complete',\r\n};\r\n\r\nconst controllers = {};\r\n\r\nfunction resize(src, blob, size) {\r\n\tif (!self.createImageBitmap || !self.OffscreenCanvas) {\r\n\t\treturn sendMessage(ImageServiceWorkerEvent.Complete, src, blob);\r\n\t}\r\n\tself.createImageBitmap(blob).then(function(img) {\r\n\t\tconst MAX_WIDTH = 320;\r\n\t\tconst MAX_HEIGHT = 240;\r\n\t\tlet width = img.width;\r\n\t\tlet height = img.height;\r\n\t\tif (width > height) {\r\n\t\t\tif (width > MAX_WIDTH) {\r\n\t\t\t\theight *= MAX_WIDTH / width;\r\n\t\t\t\twidth = MAX_WIDTH;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (height > MAX_HEIGHT) {\r\n\t\t\t\twidth *= MAX_HEIGHT / height;\r\n\t\t\t\theight = MAX_HEIGHT;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst canvas = new OffscreenCanvas(width, height);\r\n\t\tconst ctx = canvas.getContext('2d');\r\n\t\tcanvas.width = width;\r\n\t\tcanvas.height = height;\r\n\t\tctx.drawImage(img, 0, 0, width, height);\r\n\t\t// const options = { type: 'image/jpeg', quality: 0.9 };\r\n\t\t// canvas.convertToBlob(options).then(function(resizedBlob) {\r\n\t\tcanvas.convertToBlob().then(function(resizedBlob) {\r\n\t\t\tsendMessage(ImageServiceWorkerEvent.Complete, src, resizedBlob);\r\n\t\t});\r\n\t});\r\n}\r\n\r\nfunction sendMessage(type, src, data) {\r\n\tself.postMessage({\r\n\t\ttype: type,\r\n\t\tsrc: src,\r\n\t\tdata: data\r\n\t});\r\n}\r\n\r\nself.addEventListener('message', function(event) {\r\n\tconst id = event.data.id;\r\n\tconst src = event.data.src;\r\n\tconst size = event.data.size;\r\n\tif (id && !src) {\r\n\t\tconst controller = controllers[id];\r\n\t\tif (controller) {\r\n\t\t\t// console.log('Aborting', id);\r\n\t\t\tcontroller.abort();\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\tconst options = {\r\n\t\tmode: 'cors', // no-cors, *cors, same-origin\r\n\t};\r\n\tif (typeof fetch === 'function') {\r\n\t\tif (self.AbortController) {\r\n\t\t\tconst controller = new AbortController();\r\n\t\t\toptions.signal = controller.signal;\r\n\t\t\tcontrollers[id] = controller;\r\n\t\t\t// console.log('AbortController', id);\r\n\t\t}\r\n\t\tconst response = fetch(src, options)\r\n\t\t\t.then(fetchProgress({\r\n\t\t\t\t// implement onProgress method\r\n\t\t\t\tonProgress(event) {\r\n\t\t\t\t\t// console.log('ImageServiceWorker', event.loaded, event.total);\r\n\t\t\t\t\tsendMessage(ImageServiceWorkerEvent.Progress, src, event);\r\n\t\t\t\t},\r\n\t\t\t}))\r\n\t\t\t.then(function(response) {\r\n\t\t\t\treturn response.blob();\r\n\t\t\t}, function(error) {\r\n\t\t\t\tconsole.log('ImageServiceWorker.error', error);\r\n\t\t\t})\r\n\t\t\t.then(function(blob) {\r\n\t\t\t\tdelete controllers[id];\r\n\t\t\t\tif (typeof size === 'object') {\r\n\t\t\t\t\tresize(src, blob, size);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsendMessage(ImageServiceWorkerEvent.Complete, src, blob);\r\n\t\t\t\t}\r\n\t\t\t}, function(error) {\r\n\t\t\t\tconsole.log('ImageServiceWorker.error', error);\r\n\t\t\t});\r\n\t} else {\r\n\t\tconst request = new XMLHttpRequest();\r\n\t\trequest.open('GET', src, true);\r\n\t\trequest.responseType = 'blob';\r\n\t\trequest.withCredentials = true;\r\n\t\trequest.onload = function() {\r\n\t\t\tif (request.status < 300) {\r\n\t\t\t\tif (typeof size === 'object') {\r\n\t\t\t\t\tresize(src, this.response, size);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsendMessage(ImageServiceWorkerEvent.Complete, src, this.response);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// new Error('Image didn\\'t load successfully; error code:' + request.statusText);\r\n\t\t\t}\r\n\t\t};\r\n\t\trequest.onprogress = function(event) {\r\n\t\t\t// console.log('ImageServiceWorker', event.loaded, event.total);\r\n\t\t\tsendMessage(ImageServiceWorkerEvent.Progress, src, event);\r\n\t\t}\r\n\t\trequest.onerror = function() {\r\n\t\t\t// new Error('There was a network error.');\r\n\t\t};\r\n\t\trequest.send();\r\n\t}\r\n});\r\n\r\n/*\r\nself.addEventListener('message', function(event) {\r\n\t// console.log(event);\r\n\tconst src = event.data;\r\n\tconst response = fetch(src).then(function(response) {\r\n\t\treturn response.blob();\r\n\t}).then(function(blob) {\r\n\t\t// Send the image data to the UI thread!\r\n\t\tself.postMessage({\r\n\t\t\tsrc: src,\r\n\t\t\tblob: blob,\r\n\t\t});\r\n\t});\r\n});\r\n*/\r\n\r\nfunction isFetchProgressSupported() {\r\n\treturn (\r\n\t\ttypeof Response !== 'undefined' && typeof ReadableStream !== 'undefined'\r\n\t);\r\n}\r\n\r\nfunction fetchProgress({\r\n\tdefaultSize = 0,\r\n\temitDelay = 10,\r\n\tonProgress = () => null,\r\n\tonComplete = () => null,\r\n\tonError = () => null,\r\n}) {\r\n\treturn function FetchProgress(response) {\r\n\t\tif (!isFetchProgressSupported()) {\r\n\t\t\treturn response;\r\n\t\t}\r\n\t\tconst { body, headers, status } = response;\r\n\t\tconst contentLength = headers.get('content-length') || defaultSize;\r\n\t\tconst progress = new Progress(contentLength, emitDelay);\r\n\t\tconst reader = body.getReader();\r\n\t\tconst stream = new ReadableStream({\r\n\t\t\tstart(controller) {\r\n\t\t\t\tfunction push() {\r\n\t\t\t\t\treader\r\n\t\t\t\t\t\t.read()\r\n\t\t\t\t\t\t.then(({ done, value }) => {\r\n\t\t\t\t\t\t\tif (done) {\r\n\t\t\t\t\t\t\t\tonComplete({});\r\n\t\t\t\t\t\t\t\tcontroller.close();\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (value) {\r\n\t\t\t\t\t\t\t\tprogress.next(\r\n\t\t\t\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\t\t\t\tonProgress\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcontroller.enqueue(value);\r\n\t\t\t\t\t\t\tpush();\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch((err) => {\r\n\t\t\t\t\t\t\tonError(err);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tpush();\r\n\t\t\t},\r\n\t\t});\r\n\t\treturn new Response(stream, { headers, status });\r\n\t};\r\n}\r\n\r\nclass Progress {\r\n\r\n\tconstructor(length, emitDelay = 1000) {\r\n\t\tthis.eventStart = 0;\r\n\t\tthis.loaded = 0;\r\n\t\tthis.length = parseInt(length, 10) || 0;\r\n\t\tthis.emitDelay = emitDelay;\r\n\t}\r\n\r\n\tnext(chunk, onProgress) {\r\n\t\tconst chunkLength = chunk.length;\r\n\t\tthis.loaded += chunkLength;\r\n\t\tthis.eventStart = this.eventStart || Date.now();\r\n\t\tif (this.length >= this.loaded || Date.now() - this.eventStart > this.emitDelay) {\r\n\t\t\tthis.eventStart = Date.now();\r\n\t\t\tconst progress = {\r\n\t\t\t\ttotal: this.length,\r\n\t\t\t\tloaded: this.loaded,\r\n\t\t\t};\r\n\t\t\tonProgress(progress);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/*\r\nfunction fetchProgress__(response, onProgress) {\r\n\tconst reader = response.body.getReader();\r\n\t// Step 2: get total length\r\n\tconst contentLength = +response.headers.get('Content-Length');\r\n\t// Step 3: read the data\r\n\tlet receivedLength = 0; // received that many bytes at the moment\r\n\tlet chunks = []; // array of received binary chunks (comprises the body)\r\n\twhile (true) {\r\n\t\tconst { done, value } = await reader.read();\r\n\t\tif (done) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tchunks.push(value);\r\n\t\treceivedLength += value.length;\r\n\t\tif (typeof onProgress === 'function') {\r\n\t\t\tonProgress(receivedLength, contentLength);\r\n\t\t}\r\n\t\t// console.log(`ImageServiceWorker.onProgress ${receivedLength} of ${contentLength}`)\r\n\t}\r\n\t// Step 4: concatenate chunks into single Uint8Array\r\n\tlet chunksAll = new Uint8Array(receivedLength); // (4.1)\r\n\tlet position = 0;\r\n\tfor (let chunk of chunks) {\r\n\t\tchunksAll.set(chunk, position); // (4.2)\r\n\t\tposition += chunk.length;\r\n\t}\r\n\t// Step 5: decode into a string\r\n\tlet result = new TextDecoder('utf-8').decode(chunksAll);\r\n\t// We're done!\r\n\tlet commits = JSON.parse(result);\r\n}\r\n*/\r\n"]}