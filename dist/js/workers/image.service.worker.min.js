/**
 * @license beta-bhere-development v1.0.22
 * (c) 2022 Luca Zampetti <lzampetti@gmail.com>
 * License: MIT
 */
!function(e){"function"==typeof define&&define.amd?define(e):e()}((function(){"use strict";const e="progress",t="complete",n={};function o(e,n,o){if(!self.createImageBitmap||!self.OffscreenCanvas)return s(t,e,n);self.createImageBitmap(n).then((function(n){let o=n.width,r=n.height;o>r?o>320&&(r*=320/o,o=320):r>240&&(o*=240/r,r=240);const i=new OffscreenCanvas(o,r),a=i.getContext("2d");i.width=o,i.height=r,a.drawImage(n,0,0,o,r),i.convertToBlob().then((function(n){s(t,e,n)}))}))}function s(e,t,n){self.postMessage({type:e,src:t,data:n})}self.addEventListener("message",(function(i){const a=i.data.id,l=i.data.src,c=i.data.size;if(a&&!l){const e=n[a];return void(e&&e.abort())}const f={mode:"cors"};if("function"==typeof fetch){if(self.AbortController){const e=new AbortController;f.signal=e.signal,n[a]=e}fetch(l,f).then(function(e){let{defaultSize:t=0,emitDelay:n=10,onProgress:o=(()=>null),onComplete:s=(()=>null),onError:i=(()=>null)}=e;return function(e){if("undefined"==typeof Response||"undefined"==typeof ReadableStream)return e;const{body:a,headers:l,status:c}=e,f=l.get("content-length")||t,d=new r(f,n),u=a.getReader(),h=new ReadableStream({start(e){function t(){u.read().then((n=>{let{done:r,value:i}=n;if(r)return s({}),void e.close();i&&d.next(i,o),e.enqueue(i),t()})).catch((e=>{i(e)}))}t()}});return new Response(h,{headers:l,status:c})}}({onProgress(t){s(e,l,t)}})).then((function(e){return e.blob()}),(function(e){console.log("ImageServiceWorker.error",e)})).then((function(e){delete n[a],"object"==typeof c?o(l,e):s(t,l,e)}),(function(e){console.log("ImageServiceWorker.error",e)}))}else{const n=new XMLHttpRequest;n.open("GET",l,!0),n.responseType="blob",n.withCredentials=!0,n.onload=function(){n.status<300&&("object"==typeof c?o(l,this.response):s(t,l,this.response))},n.onprogress=function(t){s(e,l,t)},n.onerror=function(){},n.send()}}));class r{constructor(e,t){void 0===t&&(t=1e3),this.eventStart=0,this.loaded=0,this.length=parseInt(e,10)||0,this.emitDelay=t}next(e,t){const n=e.length;if(this.loaded+=n,this.eventStart=this.eventStart||Date.now(),this.length>=this.loaded||Date.now()-this.eventStart>this.emitDelay){this.eventStart=Date.now();t({total:this.length,loaded:this.loaded})}}}}));
//# sourceMappingURL=image.service.worker.min.js.map